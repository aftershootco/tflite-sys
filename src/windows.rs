/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __GNUC_VA_LIST: u32 = 1;
pub const __MINGW64_VERSION_MAJOR: u32 = 11;
pub const __MINGW64_VERSION_MINOR: u32 = 0;
pub const __MINGW64_VERSION_BUGFIX: u32 = 0;
pub const __MINGW64_VERSION_RC: u32 = 0;
pub const __MINGW64_VERSION_STATE: &[u8; 6usize] = b"alpha\0";
pub const __MINGW32_MAJOR_VERSION: u32 = 3;
pub const __MINGW32_MINOR_VERSION: u32 = 11;
pub const _M_AMD64: u32 = 100;
pub const _M_X64: u32 = 100;
pub const __: u32 = 1;
pub const __MINGW_USE_UNDERSCORE_PREFIX: u32 = 0;
pub const __MINGW_HAVE_ANSI_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_PRINTF: u32 = 1;
pub const __MINGW_HAVE_ANSI_C99_SCANF: u32 = 1;
pub const __MINGW_HAVE_WIDE_C99_SCANF: u32 = 1;
pub const __MINGW_SEC_WARN_STR : & [u8 ; 92usize] = b"This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation\0" ;
pub const __MINGW_MSVC2005_DEPREC_STR : & [u8 ; 117usize] = b"This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation\0" ;
pub const __MINGW_FORTIFY_LEVEL: u32 = 0;
pub const __MINGW_FORTIFY_VA_ARG: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const __USE_CRTIMP: u32 = 1;
pub const USE___UUIDOF: u32 = 0;
pub const __CRT__NO_INLINE: u32 = 1;
pub const __MSVCRT_VERSION__: u32 = 1792;
pub const _WIN32_WINNT: u32 = 1537;
pub const MINGW_HAS_SECURE_API: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const MINGW_HAS_DDK_H: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 253;
pub const _ARGMAX: u32 = 100;
pub const __USE_MINGW_ANSI_STDIO: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const PATH_MAX: u32 = 260;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const _I8_MIN: i32 = -128;
pub const _I8_MAX: u32 = 127;
pub const _UI8_MAX: u32 = 255;
pub const _I16_MIN: i32 = -32768;
pub const _I16_MAX: u32 = 32767;
pub const _UI16_MAX: u32 = 65535;
pub const _I32_MIN: i32 = -2147483648;
pub const _I32_MAX: u32 = 2147483647;
pub const _UI32_MAX: u32 = 4294967295;
pub const LONG_LONG_MAX: u64 = 9223372036854775807;
pub const LONG_LONG_MIN: i64 = -9223372036854775808;
pub const ULONG_LONG_MAX: i32 = -1;
pub const _I64_MIN: i64 = -9223372036854775808;
pub const _I64_MAX: u64 = 9223372036854775807;
pub const _UI64_MAX: i32 = -1;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const __USE_MINGW_STRTOX: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const RAND_MAX: u32 = 32767;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _MAX_ENV: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _HEAP_MAXREQ: i32 = -32;
pub const _HEAPEMPTY: i32 = -1;
pub const _HEAPOK: i32 = -2;
pub const _HEAPBADBEGIN: i32 = -3;
pub const _HEAPBADNODE: i32 = -4;
pub const _HEAPEND: i32 = -5;
pub const _HEAPBADPTR: i32 = -6;
pub const _FREEENTRY: u32 = 0;
pub const _USEDENTRY: u32 = 1;
pub const _MAX_WAIT_MALLOC_CRT: u32 = 60000;
pub const _ALLOCA_S_THRESHOLD: u32 = 1024;
pub const _ALLOCA_S_STACK_MARKER: u32 = 52428;
pub const _ALLOCA_S_HEAP_MARKER: u32 = 56797;
pub const _ALLOCA_S_MARKER_SIZE: u32 = 16;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const kTfLiteOptionalTensor: i32 = -1;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn __debugbreak();
}
extern "C" {
    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type ssize_t = ::std::os::raw::c_longlong;
pub type rsize_t = size_t;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadmbcinfostruct {
    _unused: [u8; 0],
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lc_time_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
#[test]
fn bindgen_test_layout_localeinfo_struct() {
    assert_eq!(
        ::std::mem::size_of::<localeinfo_struct>(),
        16usize,
        concat!("Size of: ", stringify!(localeinfo_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<localeinfo_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(localeinfo_struct))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<localeinfo_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(localeinfo_struct),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<localeinfo_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(localeinfo_struct),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_tstruct = localeinfo_struct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tagLC_ID() {
    assert_eq!(
        ::std::mem::size_of::<tagLC_ID>(),
        6usize,
        concat!("Size of: ", stringify!(tagLC_ID))
    );
    assert_eq!(
        ::std::mem::align_of::<tagLC_ID>(),
        2usize,
        concat!("Alignment of ", stringify!(tagLC_ID))
    );
    fn test_field_wLanguage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tagLC_ID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wLanguage) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tagLC_ID),
                "::",
                stringify!(wLanguage)
            )
        );
    }
    test_field_wLanguage();
    fn test_field_wCountry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tagLC_ID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wCountry) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(tagLC_ID),
                "::",
                stringify!(wCountry)
            )
        );
    }
    test_field_wCountry();
    fn test_field_wCodePage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tagLC_ID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wCodePage) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tagLC_ID),
                "::",
                stringify!(wCodePage)
            )
        );
    }
    test_field_wCodePage();
}
pub type LC_ID = tagLC_ID;
pub type LPLC_ID = *mut tagLC_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct {
    pub refcount: ::std::os::raw::c_int,
    pub lc_codepage: ::std::os::raw::c_uint,
    pub lc_collate_cp: ::std::os::raw::c_uint,
    pub lc_handle: [::std::os::raw::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [threadlocaleinfostruct__bindgen_ty_1; 6usize],
    pub lc_clike: ::std::os::raw::c_int,
    pub mb_cur_max: ::std::os::raw::c_int,
    pub lconv_intl_refcount: *mut ::std::os::raw::c_int,
    pub lconv_num_refcount: *mut ::std::os::raw::c_int,
    pub lconv_mon_refcount: *mut ::std::os::raw::c_int,
    pub lconv: *mut lconv,
    pub ctype1_refcount: *mut ::std::os::raw::c_int,
    pub ctype1: *mut ::std::os::raw::c_ushort,
    pub pctype: *const ::std::os::raw::c_ushort,
    pub pclmap: *const ::std::os::raw::c_uchar,
    pub pcumap: *const ::std::os::raw::c_uchar,
    pub lc_time_curr: *mut __lc_time_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threadlocaleinfostruct__bindgen_ty_1 {
    pub locale: *mut ::std::os::raw::c_char,
    pub wlocale: *mut wchar_t,
    pub refcount: *mut ::std::os::raw::c_int,
    pub wrefcount: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_threadlocaleinfostruct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<threadlocaleinfostruct__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<threadlocaleinfostruct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(threadlocaleinfostruct__bindgen_ty_1)
        )
    );
    fn test_field_locale() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<threadlocaleinfostruct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locale) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct__bindgen_ty_1),
                "::",
                stringify!(locale)
            )
        );
    }
    test_field_locale();
    fn test_field_wlocale() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<threadlocaleinfostruct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wlocale) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct__bindgen_ty_1),
                "::",
                stringify!(wlocale)
            )
        );
    }
    test_field_wlocale();
    fn test_field_refcount() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<threadlocaleinfostruct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct__bindgen_ty_1),
                "::",
                stringify!(refcount)
            )
        );
    }
    test_field_refcount();
    fn test_field_wrefcount() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<threadlocaleinfostruct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wrefcount) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct__bindgen_ty_1),
                "::",
                stringify!(wrefcount)
            )
        );
    }
    test_field_wrefcount();
}
#[test]
fn bindgen_test_layout_threadlocaleinfostruct() {
    assert_eq!(
        ::std::mem::size_of::<threadlocaleinfostruct>(),
        352usize,
        concat!("Size of: ", stringify!(threadlocaleinfostruct))
    );
    assert_eq!(
        ::std::mem::align_of::<threadlocaleinfostruct>(),
        8usize,
        concat!("Alignment of ", stringify!(threadlocaleinfostruct))
    );
    fn test_field_refcount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(refcount)
            )
        );
    }
    test_field_refcount();
    fn test_field_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lc_codepage) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lc_codepage)
            )
        );
    }
    test_field_lc_codepage();
    fn test_field_lc_collate_cp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lc_collate_cp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lc_collate_cp)
            )
        );
    }
    test_field_lc_collate_cp();
    fn test_field_lc_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lc_handle) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lc_handle)
            )
        );
    }
    test_field_lc_handle();
    fn test_field_lc_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lc_id) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lc_id)
            )
        );
    }
    test_field_lc_id();
    fn test_field_lc_category() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lc_category) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lc_category)
            )
        );
    }
    test_field_lc_category();
    fn test_field_lc_clike() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lc_clike) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lc_clike)
            )
        );
    }
    test_field_lc_clike();
    fn test_field_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mb_cur_max) as usize - ptr as usize
            },
            268usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(mb_cur_max)
            )
        );
    }
    test_field_mb_cur_max();
    fn test_field_lconv_intl_refcount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lconv_intl_refcount) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lconv_intl_refcount)
            )
        );
    }
    test_field_lconv_intl_refcount();
    fn test_field_lconv_num_refcount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lconv_num_refcount) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lconv_num_refcount)
            )
        );
    }
    test_field_lconv_num_refcount();
    fn test_field_lconv_mon_refcount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lconv_mon_refcount) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lconv_mon_refcount)
            )
        );
    }
    test_field_lconv_mon_refcount();
    fn test_field_lconv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lconv) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lconv)
            )
        );
    }
    test_field_lconv();
    fn test_field_ctype1_refcount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctype1_refcount) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(ctype1_refcount)
            )
        );
    }
    test_field_ctype1_refcount();
    fn test_field_ctype1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctype1) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(ctype1)
            )
        );
    }
    test_field_ctype1();
    fn test_field_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pctype) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(pctype)
            )
        );
    }
    test_field_pctype();
    fn test_field_pclmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pclmap) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(pclmap)
            )
        );
    }
    test_field_pclmap();
    fn test_field_pcumap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pcumap) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(pcumap)
            )
        );
    }
    test_field_pcumap();
    fn test_field_lc_time_curr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<threadlocaleinfostruct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lc_time_curr) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(threadlocaleinfostruct),
                "::",
                stringify!(lc_time_curr)
            )
        );
    }
    test_field_lc_time_curr();
}
pub type threadlocinfo = threadlocaleinfostruct;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type int_least32_t = ::std::os::raw::c_int;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn _itow_s(
        _Val: ::std::os::raw::c_int,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow_s(
        _Val: ::std::os::raw::c_long,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow_s(
        _Val: ::std::os::raw::c_ulong,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _ReturnSize: *mut size_t,
        _DstBuf: *mut wchar_t,
        _DstSizeInWords: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferSizeInWords: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow_s(
        _Val: ::std::os::raw::c_longlong,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Val: ::std::os::raw::c_ulonglong,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _PathResult: *mut wchar_t,
        _SizeInWords: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _EnvVar: *const wchar_t,
        _ResultPath: *mut wchar_t,
        _SizeInWords: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveSizeInWords: size_t,
        _Dir: *mut wchar_t,
        _DirSizeInWords: size_t,
        _Filename: *mut wchar_t,
        _FilenameSizeInWords: size_t,
        _Ext: *mut wchar_t,
        _ExtSizeInWords: size_t,
    ) -> errno_t;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    fn test_field_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDOUBLE),
                "::",
                stringify!(ld)
            )
        );
    }
    test_field_ld();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_DOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_DOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_CRT_FLOAT>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_CRT_FLOAT),
                "::",
                stringify!(f)
            )
        );
    }
    test_field_f();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: u128,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        16usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        16usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LONGDOUBLE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LONGDOUBLE),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    fn test_field_ld12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_LDBL12>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_LDBL12),
                "::",
                stringify!(ld12)
            )
        );
    }
    test_field_ld12();
}
extern "C" {
    pub static mut __imp___mb_cur_max: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub static mut _sys_errlist: [*mut ::std::os::raw::c_char; 1usize];
}
extern "C" {
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub static mut __imp___argc: *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __imp___argv: *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __imp___wargv: *mut *mut *mut wchar_t;
}
extern "C" {
    pub static mut __imp__environ: *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __imp__wenviron: *mut *mut *mut wchar_t;
}
extern "C" {
    pub static mut __imp__pgmptr: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __imp__wpgmptr: *mut *mut wchar_t;
}
extern "C" {
    pub static mut __imp__osplatform: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __imp__osver: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __imp__winver: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __imp__winmajor: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut __imp__winminor: *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _get_osplatform(_Value: *mut ::std::os::raw::c_uint) -> errno_t;
}
extern "C" {
    pub fn _get_osver(_Value: *mut ::std::os::raw::c_uint) -> errno_t;
}
extern "C" {
    pub fn _get_winver(_Value: *mut ::std::os::raw::c_uint) -> errno_t;
}
extern "C" {
    pub fn _get_winmajor(_Value: *mut ::std::os::raw::c_uint) -> errno_t;
}
extern "C" {
    pub fn _get_winminor(_Value: *mut ::std::os::raw::c_uint) -> errno_t;
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn abs(_X: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_X: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _abs64(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn atoi(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoi_l(
        _Str: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atol_l(
        _Str: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _PtFuncCompare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _PtFuncCompare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn _byteswap_ushort(_Short: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Long: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Int64: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Dest: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa(
        _Val: ::std::os::raw::c_longlong,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa(
        _Val: ::std::os::raw::c_ulonglong,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Dest: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_Str: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_Str: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_Str: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _Str: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mkstemp(template_name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn __strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn __mingw_strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn __mingw_strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn __mingw_strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn _strtod_l(
        _Str: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _Str: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _Str: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        _Str: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _Str: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Dest: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn calloc(
        _NumOfElements: ::std::os::raw::c_ulonglong,
        _SizeOfElements: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(_Memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Memory: *mut ::std::os::raw::c_void,
        _NewSize: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Memory: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Memory: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Dest: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Dest: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Dest: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn __mingw_wcstod(_Str: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn __mingw_wcstof(nptr: *const wchar_t, endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn __mingw_wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn _wcstod_l(_Str: *const wchar_t, _EndPtr: *mut *mut wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstol(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtof(_Str: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_Str: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_Str: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_Str: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_Str: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_Str: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _i64tow(
        _Val: ::std::os::raw::c_longlong,
        _DstBuf: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow(
        _Val: ::std::os::raw::c_ulonglong,
        _DstBuf: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_Str: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_Str: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _Str: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fullpath(
        _FullPath: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _SizeInBytes: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt(
        _Val: f64,
        _NumOfDigits: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt(
        _Val: f64,
        _NumOfDec: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt(
        _Val: f64,
        _NumOfDigits: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _Str: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _Str: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _Str: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _Str: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _Str: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _Str: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lrotl(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _lrotr(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _makepath(
        _Path: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _rotl64(
        _Val: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr64(
        Value: ::std::os::raw::c_ulonglong,
        Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Val: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _rotl(
        _Val: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _EnvVar: *const ::std::os::raw::c_char,
        _ResultPath: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _wfullpath(
        _FullPath: *mut wchar_t,
        _Path: *const wchar_t,
        _SizeInWords: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath(
        _ResultPath: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrMsg: *const wchar_t);
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _EnvVar: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Val: f64,
        _NumOfDigits: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Val: f64,
        _NumOfDec: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Val: f64,
        _NumOfDigits: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Val: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Val: ::std::os::raw::c_long,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Val: ::std::os::raw::c_ulong,
        _Dstbuf: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoll(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wtoll(arg1: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lltoa(
        arg1: ::std::os::raw::c_longlong,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ulltoa(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lltow(
        arg1: ::std::os::raw::c_longlong,
        arg2: *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn ulltow(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _PtFuncCompare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _dupenv_s(
        _PBuffer: *mut *mut ::std::os::raw::c_char,
        _PBufferSizeInBytes: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _ReturnSize: *mut size_t,
        _DstBuf: *mut ::std::os::raw::c_char,
        _DstSize: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa_s(
        _Val: ::std::os::raw::c_longlong,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa_s(
        _Val: ::std::os::raw::c_ulonglong,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa_s(
        _Val: ::std::os::raw::c_long,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa_s(
        _Val: ::std::os::raw::c_ulong,
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt_s(
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Val: f64,
        _NumOfDights: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt_s(
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Val: f64,
        _NumOfDec: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt_s(
        _DstBuf: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Val: f64,
        _NumOfDigits: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath_s(
        _PathResult: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _EnvVar: *const ::std::os::raw::c_char,
        _ResultPath: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveSize: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirSize: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameSize: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtSize: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _PtFuncCompare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        _Context: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _heapinfo {
    pub _pentry: *mut ::std::os::raw::c_int,
    pub _size: size_t,
    pub _useflag: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__heapinfo() {
    assert_eq!(
        ::std::mem::size_of::<_heapinfo>(),
        24usize,
        concat!("Size of: ", stringify!(_heapinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_heapinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_heapinfo))
    );
    fn test_field__pentry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_heapinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._pentry) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_heapinfo),
                "::",
                stringify!(_pentry)
            )
        );
    }
    test_field__pentry();
    fn test_field__size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_heapinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_heapinfo),
                "::",
                stringify!(_size)
            )
        );
    }
    test_field__size();
    fn test_field__useflag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_heapinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._useflag) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_heapinfo),
                "::",
                stringify!(_useflag)
            )
        );
    }
    test_field__useflag();
}
pub type _HEAPINFO = _heapinfo;
extern "C" {
    pub static mut _amblksiz: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __mingw_aligned_malloc(_Size: size_t, _Alignment: size_t)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mingw_aligned_free(_Memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __mingw_aligned_offset_realloc(
        _Memory: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mingw_aligned_realloc(
        _Memory: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _resetstkoflw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_malloc_crt_max_wait(_NewValue: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _expand(
        _Memory: *mut ::std::os::raw::c_void,
        _NewSize: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize(_Memory: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _get_sbh_threshold() -> size_t;
}
extern "C" {
    pub fn _set_sbh_threshold(_NewValue: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_amblksiz(_Value: size_t) -> errno_t;
}
extern "C" {
    pub fn _get_amblksiz(_Value: *mut size_t) -> errno_t;
}
extern "C" {
    pub fn _heapadd(_Memory: *mut ::std::os::raw::c_void, _Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapchk() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapset(_Fill: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapwalk(_EntryInfo: *mut _HEAPINFO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapused(_Used: *mut size_t, _Commit: *mut size_t) -> size_t;
}
extern "C" {
    pub fn _get_heap_handle() -> isize;
}
pub const TfLiteStatus_kTfLiteOk: TfLiteStatus = 0;
pub const TfLiteStatus_kTfLiteError: TfLiteStatus = 1;
pub const TfLiteStatus_kTfLiteDelegateError: TfLiteStatus = 2;
pub const TfLiteStatus_kTfLiteApplicationError: TfLiteStatus = 3;
pub const TfLiteStatus_kTfLiteDelegateDataNotFound: TfLiteStatus = 4;
pub const TfLiteStatus_kTfLiteDelegateDataWriteError: TfLiteStatus = 5;
pub type TfLiteStatus = ::std::os::raw::c_uint;
pub const TfLiteType_kTfLiteNoType: TfLiteType = 0;
pub const TfLiteType_kTfLiteFloat32: TfLiteType = 1;
pub const TfLiteType_kTfLiteInt32: TfLiteType = 2;
pub const TfLiteType_kTfLiteUInt8: TfLiteType = 3;
pub const TfLiteType_kTfLiteInt64: TfLiteType = 4;
pub const TfLiteType_kTfLiteString: TfLiteType = 5;
pub const TfLiteType_kTfLiteBool: TfLiteType = 6;
pub const TfLiteType_kTfLiteInt16: TfLiteType = 7;
pub const TfLiteType_kTfLiteComplex64: TfLiteType = 8;
pub const TfLiteType_kTfLiteInt8: TfLiteType = 9;
pub const TfLiteType_kTfLiteFloat16: TfLiteType = 10;
pub const TfLiteType_kTfLiteFloat64: TfLiteType = 11;
pub const TfLiteType_kTfLiteComplex128: TfLiteType = 12;
pub const TfLiteType_kTfLiteUInt64: TfLiteType = 13;
pub const TfLiteType_kTfLiteResource: TfLiteType = 14;
pub const TfLiteType_kTfLiteVariant: TfLiteType = 15;
pub const TfLiteType_kTfLiteUInt32: TfLiteType = 16;
pub type TfLiteType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteQuantizationParams {
    pub scale: f32,
    pub zero_point: i32,
}
#[test]
fn bindgen_test_layout_TfLiteQuantizationParams() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteQuantizationParams>(),
        8usize,
        concat!("Size of: ", stringify!(TfLiteQuantizationParams))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteQuantizationParams>(),
        4usize,
        concat!("Alignment of ", stringify!(TfLiteQuantizationParams))
    );
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteQuantizationParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteQuantizationParams),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_zero_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteQuantizationParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_point) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteQuantizationParams),
                "::",
                stringify!(zero_point)
            )
        );
    }
    test_field_zero_point();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteModel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteInterpreterOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteInterpreter {
    _unused: [u8; 0],
}
extern "C" {
    pub fn TfLiteVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TfLiteModelCreate(
        model_data: *const ::std::os::raw::c_void,
        model_size: size_t,
    ) -> *mut TfLiteModel;
}
extern "C" {
    pub fn TfLiteModelCreateFromFile(model_path: *const ::std::os::raw::c_char)
        -> *mut TfLiteModel;
}
extern "C" {
    pub fn TfLiteModelDelete(model: *mut TfLiteModel);
}
extern "C" {
    pub fn TfLiteInterpreterOptionsCreate() -> *mut TfLiteInterpreterOptions;
}
extern "C" {
    pub fn TfLiteInterpreterOptionsDelete(options: *mut TfLiteInterpreterOptions);
}
extern "C" {
    pub fn TfLiteInterpreterOptionsSetNumThreads(
        options: *mut TfLiteInterpreterOptions,
        num_threads: i32,
    );
}
extern "C" {
    pub fn TfLiteInterpreterOptionsAddDelegate(
        options: *mut TfLiteInterpreterOptions,
        delegate: *mut TfLiteDelegate,
    );
}
extern "C" {
    pub fn TfLiteInterpreterOptionsSetErrorReporter(
        options: *mut TfLiteInterpreterOptions,
        reporter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                format: *const ::std::os::raw::c_char,
                args: va_list,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn TfLiteInterpreterCreate(
        model: *const TfLiteModel,
        optional_options: *const TfLiteInterpreterOptions,
    ) -> *mut TfLiteInterpreter;
}
extern "C" {
    pub fn TfLiteInterpreterDelete(interpreter: *mut TfLiteInterpreter);
}
extern "C" {
    pub fn TfLiteInterpreterGetInputTensorCount(interpreter: *const TfLiteInterpreter) -> i32;
}
extern "C" {
    pub fn TfLiteInterpreterGetInputTensor(
        interpreter: *const TfLiteInterpreter,
        input_index: i32,
    ) -> *mut TfLiteTensor;
}
extern "C" {
    pub fn TfLiteInterpreterResizeInputTensor(
        interpreter: *mut TfLiteInterpreter,
        input_index: i32,
        input_dims: *const ::std::os::raw::c_int,
        input_dims_size: i32,
    ) -> TfLiteStatus;
}
extern "C" {
    pub fn TfLiteInterpreterAllocateTensors(interpreter: *mut TfLiteInterpreter) -> TfLiteStatus;
}
extern "C" {
    pub fn TfLiteInterpreterInvoke(interpreter: *mut TfLiteInterpreter) -> TfLiteStatus;
}
extern "C" {
    pub fn TfLiteInterpreterGetOutputTensorCount(interpreter: *const TfLiteInterpreter) -> i32;
}
extern "C" {
    pub fn TfLiteInterpreterGetOutputTensor(
        interpreter: *const TfLiteInterpreter,
        output_index: i32,
    ) -> *const TfLiteTensor;
}
extern "C" {
    pub fn TfLiteTensorType(tensor: *const TfLiteTensor) -> TfLiteType;
}
extern "C" {
    pub fn TfLiteTensorNumDims(tensor: *const TfLiteTensor) -> i32;
}
extern "C" {
    pub fn TfLiteTensorDim(tensor: *const TfLiteTensor, dim_index: i32) -> i32;
}
extern "C" {
    pub fn TfLiteTensorByteSize(tensor: *const TfLiteTensor) -> size_t;
}
extern "C" {
    pub fn TfLiteTensorData(tensor: *const TfLiteTensor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TfLiteTensorName(tensor: *const TfLiteTensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TfLiteTensorQuantizationParams(tensor: *const TfLiteTensor) -> TfLiteQuantizationParams;
}
extern "C" {
    pub fn TfLiteTensorCopyFromBuffer(
        tensor: *mut TfLiteTensor,
        input_data: *const ::std::os::raw::c_void,
        input_data_size: size_t,
    ) -> TfLiteStatus;
}
extern "C" {
    pub fn TfLiteTensorCopyToBuffer(
        output_tensor: *const TfLiteTensor,
        output_data: *mut ::std::os::raw::c_void,
        output_data_size: size_t,
    ) -> TfLiteStatus;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    fn test_field___clang_max_align_nonce1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
    }
    test_field___clang_max_align_nonce1();
    fn test_field___clang_max_align_nonce2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    test_field___clang_max_align_nonce2();
}
pub const TfLiteExternalContextType_kTfLiteEigenContext: TfLiteExternalContextType = 0;
pub const TfLiteExternalContextType_kTfLiteGemmLowpContext: TfLiteExternalContextType = 1;
pub const TfLiteExternalContextType_kTfLiteEdgeTpuContext: TfLiteExternalContextType = 2;
pub const TfLiteExternalContextType_kTfLiteCpuBackendContext: TfLiteExternalContextType = 3;
pub const TfLiteExternalContextType_kTfLiteMaxExternalContexts: TfLiteExternalContextType = 4;
pub type TfLiteExternalContextType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteExternalContext {
    pub type_: TfLiteExternalContextType,
    pub Refresh:
        ::std::option::Option<unsafe extern "C" fn(context: *mut TfLiteContext) -> TfLiteStatus>,
}
#[test]
fn bindgen_test_layout_TfLiteExternalContext() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteExternalContext>(),
        16usize,
        concat!("Size of: ", stringify!(TfLiteExternalContext))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteExternalContext>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteExternalContext))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteExternalContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteExternalContext),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_Refresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteExternalContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Refresh) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteExternalContext),
                "::",
                stringify!(Refresh)
            )
        );
    }
    test_field_Refresh();
}
#[repr(C)]
#[derive(Debug)]
pub struct TfLiteIntArray {
    pub size: ::std::os::raw::c_int,
    pub data: __IncompleteArrayField<::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_TfLiteIntArray() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteIntArray>(),
        4usize,
        concat!("Size of: ", stringify!(TfLiteIntArray))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteIntArray>(),
        4usize,
        concat!("Alignment of ", stringify!(TfLiteIntArray))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteIntArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteIntArray),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteIntArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteIntArray),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
extern "C" {
    pub fn TfLiteIntArrayGetSizeInBytes(size: ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn TfLiteIntArrayCreate(size: ::std::os::raw::c_int) -> *mut TfLiteIntArray;
}
extern "C" {
    pub fn TfLiteIntArrayEqual(
        a: *const TfLiteIntArray,
        b: *const TfLiteIntArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TfLiteIntArrayEqualsArray(
        a: *const TfLiteIntArray,
        b_size: ::std::os::raw::c_int,
        b_data: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TfLiteIntArrayCopy(src: *const TfLiteIntArray) -> *mut TfLiteIntArray;
}
extern "C" {
    pub fn TfLiteIntArrayFree(a: *mut TfLiteIntArray);
}
#[repr(C)]
#[derive(Debug)]
pub struct TfLiteFloatArray {
    pub size: ::std::os::raw::c_int,
    pub data: __IncompleteArrayField<f32>,
}
#[test]
fn bindgen_test_layout_TfLiteFloatArray() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteFloatArray>(),
        4usize,
        concat!("Size of: ", stringify!(TfLiteFloatArray))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteFloatArray>(),
        4usize,
        concat!("Alignment of ", stringify!(TfLiteFloatArray))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteFloatArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteFloatArray),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteFloatArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteFloatArray),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
extern "C" {
    pub fn TfLiteFloatArrayGetSizeInBytes(size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TfLiteFloatArrayCreate(size: ::std::os::raw::c_int) -> *mut TfLiteFloatArray;
}
extern "C" {
    pub fn TfLiteFloatArrayFree(a: *mut TfLiteFloatArray);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteComplex64 {
    pub re: f32,
    pub im: f32,
}
#[test]
fn bindgen_test_layout_TfLiteComplex64() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteComplex64>(),
        8usize,
        concat!("Size of: ", stringify!(TfLiteComplex64))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteComplex64>(),
        4usize,
        concat!("Alignment of ", stringify!(TfLiteComplex64))
    );
    fn test_field_re() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteComplex64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteComplex64),
                "::",
                stringify!(re)
            )
        );
    }
    test_field_re();
    fn test_field_im() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteComplex64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).im) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteComplex64),
                "::",
                stringify!(im)
            )
        );
    }
    test_field_im();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteComplex128 {
    pub re: f64,
    pub im: f64,
}
#[test]
fn bindgen_test_layout_TfLiteComplex128() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteComplex128>(),
        16usize,
        concat!("Size of: ", stringify!(TfLiteComplex128))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteComplex128>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteComplex128))
    );
    fn test_field_re() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteComplex128>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).re) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteComplex128),
                "::",
                stringify!(re)
            )
        );
    }
    test_field_re();
    fn test_field_im() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteComplex128>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).im) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteComplex128),
                "::",
                stringify!(im)
            )
        );
    }
    test_field_im();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteFloat16 {
    pub data: u16,
}
#[test]
fn bindgen_test_layout_TfLiteFloat16() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteFloat16>(),
        2usize,
        concat!("Size of: ", stringify!(TfLiteFloat16))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteFloat16>(),
        2usize,
        concat!("Alignment of ", stringify!(TfLiteFloat16))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteFloat16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteFloat16),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
extern "C" {
    pub fn TfLiteTypeGetName(type_: TfLiteType) -> *const ::std::os::raw::c_char;
}
pub const TfLiteQuantizationType_kTfLiteNoQuantization: TfLiteQuantizationType = 0;
pub const TfLiteQuantizationType_kTfLiteAffineQuantization: TfLiteQuantizationType = 1;
pub type TfLiteQuantizationType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteQuantization {
    pub type_: TfLiteQuantizationType,
    pub params: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TfLiteQuantization() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteQuantization>(),
        16usize,
        concat!("Size of: ", stringify!(TfLiteQuantization))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteQuantization>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteQuantization))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteQuantization>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteQuantization),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_params() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteQuantization>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteQuantization),
                "::",
                stringify!(params)
            )
        );
    }
    test_field_params();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteAffineQuantization {
    pub scale: *mut TfLiteFloatArray,
    pub zero_point: *mut TfLiteIntArray,
    pub quantized_dimension: i32,
}
#[test]
fn bindgen_test_layout_TfLiteAffineQuantization() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteAffineQuantization>(),
        24usize,
        concat!("Size of: ", stringify!(TfLiteAffineQuantization))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteAffineQuantization>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteAffineQuantization))
    );
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteAffineQuantization>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteAffineQuantization),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_zero_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteAffineQuantization>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_point) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteAffineQuantization),
                "::",
                stringify!(zero_point)
            )
        );
    }
    test_field_zero_point();
    fn test_field_quantized_dimension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteAffineQuantization>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quantized_dimension) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteAffineQuantization),
                "::",
                stringify!(quantized_dimension)
            )
        );
    }
    test_field_quantized_dimension();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TfLitePtrUnion {
    pub i32_: *mut i32,
    pub u32_: *mut u32,
    pub i64_: *mut i64,
    pub u64_: *mut u64,
    pub f: *mut f32,
    pub f16: *mut TfLiteFloat16,
    pub f64_: *mut f64,
    pub raw: *mut ::std::os::raw::c_char,
    pub raw_const: *const ::std::os::raw::c_char,
    pub uint8: *mut u8,
    pub b: *mut bool,
    pub i16_: *mut i16,
    pub c64: *mut TfLiteComplex64,
    pub c128: *mut TfLiteComplex128,
    pub int8: *mut i8,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TfLitePtrUnion() {
    assert_eq!(
        ::std::mem::size_of::<TfLitePtrUnion>(),
        8usize,
        concat!("Size of: ", stringify!(TfLitePtrUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLitePtrUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLitePtrUnion))
    );
    fn test_field_i32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i32_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(i32_)
            )
        );
    }
    test_field_i32();
    fn test_field_u32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(u32_)
            )
        );
    }
    test_field_u32();
    fn test_field_i64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i64_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(i64_)
            )
        );
    }
    test_field_i64();
    fn test_field_u64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u64_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(u64_)
            )
        );
    }
    test_field_u64();
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(f)
            )
        );
    }
    test_field_f();
    fn test_field_f16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f16) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(f16)
            )
        );
    }
    test_field_f16();
    fn test_field_f64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f64_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(f64_)
            )
        );
    }
    test_field_f64();
    fn test_field_raw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(raw)
            )
        );
    }
    test_field_raw();
    fn test_field_raw_const() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raw_const) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(raw_const)
            )
        );
    }
    test_field_raw_const();
    fn test_field_uint8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uint8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(uint8)
            )
        );
    }
    test_field_uint8();
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(b)
            )
        );
    }
    test_field_b();
    fn test_field_i16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i16_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(i16_)
            )
        );
    }
    test_field_i16();
    fn test_field_c64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).c64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(c64)
            )
        );
    }
    test_field_c64();
    fn test_field_c128() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).c128) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(c128)
            )
        );
    }
    test_field_c128();
    fn test_field_int8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).int8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(int8)
            )
        );
    }
    test_field_int8();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLitePtrUnion>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLitePtrUnion),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
pub const TfLiteAllocationType_kTfLiteMemNone: TfLiteAllocationType = 0;
pub const TfLiteAllocationType_kTfLiteMmapRo: TfLiteAllocationType = 1;
pub const TfLiteAllocationType_kTfLiteArenaRw: TfLiteAllocationType = 2;
pub const TfLiteAllocationType_kTfLiteArenaRwPersistent: TfLiteAllocationType = 3;
pub const TfLiteAllocationType_kTfLiteDynamic: TfLiteAllocationType = 4;
pub const TfLiteAllocationType_kTfLitePersistentRo: TfLiteAllocationType = 5;
pub const TfLiteAllocationType_kTfLiteCustom: TfLiteAllocationType = 6;
pub type TfLiteAllocationType = ::std::os::raw::c_uint;
pub type TfLiteBufferHandle = ::std::os::raw::c_int;
pub const kTfLiteNullBufferHandle: _bindgen_ty_1 = -1;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const TfLiteDimensionType_kTfLiteDimDense: TfLiteDimensionType = 0;
pub const TfLiteDimensionType_kTfLiteDimSparseCSR: TfLiteDimensionType = 1;
pub type TfLiteDimensionType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteDimensionMetadata {
    pub format: TfLiteDimensionType,
    pub dense_size: ::std::os::raw::c_int,
    pub array_segments: *mut TfLiteIntArray,
    pub array_indices: *mut TfLiteIntArray,
}
#[test]
fn bindgen_test_layout_TfLiteDimensionMetadata() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteDimensionMetadata>(),
        24usize,
        concat!("Size of: ", stringify!(TfLiteDimensionMetadata))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteDimensionMetadata>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteDimensionMetadata))
    );
    fn test_field_format() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDimensionMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDimensionMetadata),
                "::",
                stringify!(format)
            )
        );
    }
    test_field_format();
    fn test_field_dense_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDimensionMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dense_size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDimensionMetadata),
                "::",
                stringify!(dense_size)
            )
        );
    }
    test_field_dense_size();
    fn test_field_array_segments() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDimensionMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array_segments) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDimensionMetadata),
                "::",
                stringify!(array_segments)
            )
        );
    }
    test_field_array_segments();
    fn test_field_array_indices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDimensionMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array_indices) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDimensionMetadata),
                "::",
                stringify!(array_indices)
            )
        );
    }
    test_field_array_indices();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteSparsity {
    pub traversal_order: *mut TfLiteIntArray,
    pub block_map: *mut TfLiteIntArray,
    pub dim_metadata: *mut TfLiteDimensionMetadata,
    pub dim_metadata_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TfLiteSparsity() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteSparsity>(),
        32usize,
        concat!("Size of: ", stringify!(TfLiteSparsity))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteSparsity>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteSparsity))
    );
    fn test_field_traversal_order() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteSparsity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).traversal_order) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteSparsity),
                "::",
                stringify!(traversal_order)
            )
        );
    }
    test_field_traversal_order();
    fn test_field_block_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteSparsity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).block_map) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteSparsity),
                "::",
                stringify!(block_map)
            )
        );
    }
    test_field_block_map();
    fn test_field_dim_metadata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteSparsity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dim_metadata) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteSparsity),
                "::",
                stringify!(dim_metadata)
            )
        );
    }
    test_field_dim_metadata();
    fn test_field_dim_metadata_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteSparsity>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dim_metadata_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteSparsity),
                "::",
                stringify!(dim_metadata_size)
            )
        );
    }
    test_field_dim_metadata_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteCustomAllocation {
    pub data: *mut ::std::os::raw::c_void,
    pub bytes: size_t,
}
#[test]
fn bindgen_test_layout_TfLiteCustomAllocation() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteCustomAllocation>(),
        16usize,
        concat!("Size of: ", stringify!(TfLiteCustomAllocation))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteCustomAllocation>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteCustomAllocation))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteCustomAllocation>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteCustomAllocation),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteCustomAllocation>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteCustomAllocation),
                "::",
                stringify!(bytes)
            )
        );
    }
    test_field_bytes();
}
pub const TfLiteCustomAllocationFlags_kTfLiteCustomAllocationFlagsNone:
    TfLiteCustomAllocationFlags = 0;
pub const TfLiteCustomAllocationFlags_kTfLiteCustomAllocationFlagsSkipAlignCheck:
    TfLiteCustomAllocationFlags = 1;
pub type TfLiteCustomAllocationFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TfLiteTensor {
    pub type_: TfLiteType,
    pub data: TfLitePtrUnion,
    pub dims: *mut TfLiteIntArray,
    pub params: TfLiteQuantizationParams,
    pub allocation_type: TfLiteAllocationType,
    pub bytes: size_t,
    pub allocation: *const ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub delegate: *mut TfLiteDelegate,
    pub buffer_handle: TfLiteBufferHandle,
    pub data_is_stale: bool,
    pub is_variable: bool,
    pub quantization: TfLiteQuantization,
    pub sparsity: *mut TfLiteSparsity,
    pub dims_signature: *const TfLiteIntArray,
}
#[test]
fn bindgen_test_layout_TfLiteTensor() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteTensor>(),
        112usize,
        concat!("Size of: ", stringify!(TfLiteTensor))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteTensor>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteTensor))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_dims() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dims) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(dims)
            )
        );
    }
    test_field_dims();
    fn test_field_params() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(params)
            )
        );
    }
    test_field_params();
    fn test_field_allocation_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allocation_type) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(allocation_type)
            )
        );
    }
    test_field_allocation_type();
    fn test_field_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(bytes)
            )
        );
    }
    test_field_bytes();
    fn test_field_allocation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allocation) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(allocation)
            )
        );
    }
    test_field_allocation();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_delegate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delegate) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(delegate)
            )
        );
    }
    test_field_delegate();
    fn test_field_buffer_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_handle) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(buffer_handle)
            )
        );
    }
    test_field_buffer_handle();
    fn test_field_data_is_stale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_is_stale) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(data_is_stale)
            )
        );
    }
    test_field_data_is_stale();
    fn test_field_is_variable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_variable) as usize - ptr as usize
            },
            77usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(is_variable)
            )
        );
    }
    test_field_is_variable();
    fn test_field_quantization() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quantization) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(quantization)
            )
        );
    }
    test_field_quantization();
    fn test_field_sparsity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sparsity) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(sparsity)
            )
        );
    }
    test_field_sparsity();
    fn test_field_dims_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dims_signature) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteTensor),
                "::",
                stringify!(dims_signature)
            )
        );
    }
    test_field_dims_signature();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteNode {
    pub inputs: *mut TfLiteIntArray,
    pub outputs: *mut TfLiteIntArray,
    pub intermediates: *mut TfLiteIntArray,
    pub temporaries: *mut TfLiteIntArray,
    pub user_data: *mut ::std::os::raw::c_void,
    pub builtin_data: *mut ::std::os::raw::c_void,
    pub custom_initial_data: *const ::std::os::raw::c_void,
    pub custom_initial_data_size: ::std::os::raw::c_int,
    pub delegate: *mut TfLiteDelegate,
    pub might_have_side_effect: bool,
}
#[test]
fn bindgen_test_layout_TfLiteNode() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteNode>(),
        80usize,
        concat!("Size of: ", stringify!(TfLiteNode))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteNode>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteNode))
    );
    fn test_field_inputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(inputs)
            )
        );
    }
    test_field_inputs();
    fn test_field_outputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).outputs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(outputs)
            )
        );
    }
    test_field_outputs();
    fn test_field_intermediates() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intermediates) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(intermediates)
            )
        );
    }
    test_field_intermediates();
    fn test_field_temporaries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).temporaries) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(temporaries)
            )
        );
    }
    test_field_temporaries();
    fn test_field_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(user_data)
            )
        );
    }
    test_field_user_data();
    fn test_field_builtin_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).builtin_data) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(builtin_data)
            )
        );
    }
    test_field_builtin_data();
    fn test_field_custom_initial_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).custom_initial_data) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(custom_initial_data)
            )
        );
    }
    test_field_custom_initial_data();
    fn test_field_custom_initial_data_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).custom_initial_data_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(custom_initial_data_size)
            )
        );
    }
    test_field_custom_initial_data_size();
    fn test_field_delegate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delegate) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(delegate)
            )
        );
    }
    test_field_delegate();
    fn test_field_might_have_side_effect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).might_have_side_effect) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteNode),
                "::",
                stringify!(might_have_side_effect)
            )
        );
    }
    test_field_might_have_side_effect();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TfLiteEvalTensor {
    pub data: TfLitePtrUnion,
    pub dims: *mut TfLiteIntArray,
    pub type_: TfLiteType,
}
#[test]
fn bindgen_test_layout_TfLiteEvalTensor() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteEvalTensor>(),
        24usize,
        concat!("Size of: ", stringify!(TfLiteEvalTensor))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteEvalTensor>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteEvalTensor))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteEvalTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteEvalTensor),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_dims() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteEvalTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dims) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteEvalTensor),
                "::",
                stringify!(dims)
            )
        );
    }
    test_field_dims();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteEvalTensor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteEvalTensor),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
extern "C" {
    pub fn TfLiteTensorDataFree(t: *mut TfLiteTensor);
}
extern "C" {
    pub fn TfLiteQuantizationFree(quantization: *mut TfLiteQuantization);
}
extern "C" {
    pub fn TfLiteSparsityFree(sparsity: *mut TfLiteSparsity);
}
extern "C" {
    pub fn TfLiteTensorFree(t: *mut TfLiteTensor);
}
extern "C" {
    pub fn TfLiteTensorReset(
        type_: TfLiteType,
        name: *const ::std::os::raw::c_char,
        dims: *mut TfLiteIntArray,
        quantization: TfLiteQuantizationParams,
        buffer: *mut ::std::os::raw::c_char,
        size: size_t,
        allocation_type: TfLiteAllocationType,
        allocation: *const ::std::os::raw::c_void,
        is_variable: bool,
        tensor: *mut TfLiteTensor,
    );
}
extern "C" {
    pub fn TfLiteTensorRealloc(num_bytes: size_t, tensor: *mut TfLiteTensor);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteDelegateParams {
    pub delegate: *mut TfLiteDelegate,
    pub nodes_to_replace: *mut TfLiteIntArray,
    pub input_tensors: *mut TfLiteIntArray,
    pub output_tensors: *mut TfLiteIntArray,
}
#[test]
fn bindgen_test_layout_TfLiteDelegateParams() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteDelegateParams>(),
        32usize,
        concat!("Size of: ", stringify!(TfLiteDelegateParams))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteDelegateParams>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteDelegateParams))
    );
    fn test_field_delegate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegateParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delegate) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegateParams),
                "::",
                stringify!(delegate)
            )
        );
    }
    test_field_delegate();
    fn test_field_nodes_to_replace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegateParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodes_to_replace) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegateParams),
                "::",
                stringify!(nodes_to_replace)
            )
        );
    }
    test_field_nodes_to_replace();
    fn test_field_input_tensors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegateParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).input_tensors) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegateParams),
                "::",
                stringify!(input_tensors)
            )
        );
    }
    test_field_input_tensors();
    fn test_field_output_tensors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegateParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).output_tensors) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegateParams),
                "::",
                stringify!(output_tensors)
            )
        );
    }
    test_field_output_tensors();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteContext {
    pub tensors_size: size_t,
    pub GetExecutionPlan: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut TfLiteContext,
            execution_plan: *mut *mut TfLiteIntArray,
        ) -> TfLiteStatus,
    >,
    pub tensors: *mut TfLiteTensor,
    pub impl_: *mut ::std::os::raw::c_void,
    pub ResizeTensor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TfLiteContext,
            tensor: *mut TfLiteTensor,
            new_size: *mut TfLiteIntArray,
        ) -> TfLiteStatus,
    >,
    pub ReportError: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut TfLiteContext, msg: *const ::std::os::raw::c_char, ...),
    >,
    pub AddTensors: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TfLiteContext,
            tensors_to_add: ::std::os::raw::c_int,
            first_new_tensor_index: *mut ::std::os::raw::c_int,
        ) -> TfLiteStatus,
    >,
    pub GetNodeAndRegistration: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TfLiteContext,
            node_index: ::std::os::raw::c_int,
            node: *mut *mut TfLiteNode,
            registration: *mut *mut TfLiteRegistration,
        ) -> TfLiteStatus,
    >,
    pub ReplaceNodeSubsetsWithDelegateKernels: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TfLiteContext,
            registration: TfLiteRegistration,
            nodes_to_replace: *const TfLiteIntArray,
            delegate: *mut TfLiteDelegate,
        ) -> TfLiteStatus,
    >,
    pub recommended_num_threads: ::std::os::raw::c_int,
    pub GetExternalContext: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TfLiteContext,
            arg2: TfLiteExternalContextType,
        ) -> *mut TfLiteExternalContext,
    >,
    pub SetExternalContext: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut TfLiteContext,
            arg2: TfLiteExternalContextType,
            arg3: *mut TfLiteExternalContext,
        ),
    >,
    pub allow_fp32_relax_to_fp16: bool,
    pub profiler: *mut ::std::os::raw::c_void,
    pub AllocatePersistentBuffer: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut TfLiteContext, bytes: size_t) -> *mut ::std::os::raw::c_void,
    >,
    pub AllocateBufferForEval: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut TfLiteContext,
            bytes: size_t,
            ptr: *mut *mut ::std::os::raw::c_void,
        ) -> TfLiteStatus,
    >,
    pub RequestScratchBufferInArena: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut TfLiteContext,
            bytes: size_t,
            buffer_idx: *mut ::std::os::raw::c_int,
        ) -> TfLiteStatus,
    >,
    pub GetScratchBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut TfLiteContext,
            buffer_idx: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ResizeTensorExplicit: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut TfLiteContext,
            tensor: *mut TfLiteTensor,
            dims: ::std::os::raw::c_int,
            shape: *const ::std::os::raw::c_int,
        ) -> TfLiteStatus,
    >,
    pub PreviewDelegatePartitioning: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut TfLiteContext,
            nodes_to_replace: *const TfLiteIntArray,
            partition_params_array: *mut *mut TfLiteDelegateParams,
            num_partitions: *mut ::std::os::raw::c_int,
        ) -> TfLiteStatus,
    >,
    pub GetTensor: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const TfLiteContext,
            tensor_idx: ::std::os::raw::c_int,
        ) -> *mut TfLiteTensor,
    >,
    pub GetEvalTensor: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const TfLiteContext,
            tensor_idx: ::std::os::raw::c_int,
        ) -> *mut TfLiteEvalTensor,
    >,
}
#[test]
fn bindgen_test_layout_TfLiteContext() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteContext>(),
        176usize,
        concat!("Size of: ", stringify!(TfLiteContext))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteContext>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteContext))
    );
    fn test_field_tensors_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tensors_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(tensors_size)
            )
        );
    }
    test_field_tensors_size();
    fn test_field_GetExecutionPlan() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExecutionPlan) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(GetExecutionPlan)
            )
        );
    }
    test_field_GetExecutionPlan();
    fn test_field_tensors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tensors) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(tensors)
            )
        );
    }
    test_field_tensors();
    fn test_field_impl_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(impl_)
            )
        );
    }
    test_field_impl_();
    fn test_field_ResizeTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResizeTensor) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(ResizeTensor)
            )
        );
    }
    test_field_ResizeTensor();
    fn test_field_ReportError() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReportError) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(ReportError)
            )
        );
    }
    test_field_ReportError();
    fn test_field_AddTensors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddTensors) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(AddTensors)
            )
        );
    }
    test_field_AddTensors();
    fn test_field_GetNodeAndRegistration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetNodeAndRegistration) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(GetNodeAndRegistration)
            )
        );
    }
    test_field_GetNodeAndRegistration();
    fn test_field_ReplaceNodeSubsetsWithDelegateKernels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReplaceNodeSubsetsWithDelegateKernels) as usize
                    - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(ReplaceNodeSubsetsWithDelegateKernels)
            )
        );
    }
    test_field_ReplaceNodeSubsetsWithDelegateKernels();
    fn test_field_recommended_num_threads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).recommended_num_threads) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(recommended_num_threads)
            )
        );
    }
    test_field_recommended_num_threads();
    fn test_field_GetExternalContext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExternalContext) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(GetExternalContext)
            )
        );
    }
    test_field_GetExternalContext();
    fn test_field_SetExternalContext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetExternalContext) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(SetExternalContext)
            )
        );
    }
    test_field_SetExternalContext();
    fn test_field_allow_fp32_relax_to_fp16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).allow_fp32_relax_to_fp16) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(allow_fp32_relax_to_fp16)
            )
        );
    }
    test_field_allow_fp32_relax_to_fp16();
    fn test_field_profiler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).profiler) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(profiler)
            )
        );
    }
    test_field_profiler();
    fn test_field_AllocatePersistentBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocatePersistentBuffer) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(AllocatePersistentBuffer)
            )
        );
    }
    test_field_AllocatePersistentBuffer();
    fn test_field_AllocateBufferForEval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocateBufferForEval) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(AllocateBufferForEval)
            )
        );
    }
    test_field_AllocateBufferForEval();
    fn test_field_RequestScratchBufferInArena() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RequestScratchBufferInArena) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(RequestScratchBufferInArena)
            )
        );
    }
    test_field_RequestScratchBufferInArena();
    fn test_field_GetScratchBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetScratchBuffer) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(GetScratchBuffer)
            )
        );
    }
    test_field_GetScratchBuffer();
    fn test_field_ResizeTensorExplicit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResizeTensorExplicit) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(ResizeTensorExplicit)
            )
        );
    }
    test_field_ResizeTensorExplicit();
    fn test_field_PreviewDelegatePartitioning() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PreviewDelegatePartitioning) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(PreviewDelegatePartitioning)
            )
        );
    }
    test_field_PreviewDelegatePartitioning();
    fn test_field_GetTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTensor) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(GetTensor)
            )
        );
    }
    test_field_GetTensor();
    fn test_field_GetEvalTensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetEvalTensor) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteContext),
                "::",
                stringify!(GetEvalTensor)
            )
        );
    }
    test_field_GetEvalTensor();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteRegistration {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut TfLiteContext,
            buffer: *const ::std::os::raw::c_char,
            length: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(context: *mut TfLiteContext, buffer: *mut ::std::os::raw::c_void),
    >,
    pub prepare: ::std::option::Option<
        unsafe extern "C" fn(context: *mut TfLiteContext, node: *mut TfLiteNode) -> TfLiteStatus,
    >,
    pub invoke: ::std::option::Option<
        unsafe extern "C" fn(context: *mut TfLiteContext, node: *mut TfLiteNode) -> TfLiteStatus,
    >,
    pub profiling_string: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const TfLiteContext,
            node: *const TfLiteNode,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub builtin_code: i32,
    pub custom_name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TfLiteRegistration() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteRegistration>(),
        64usize,
        concat!("Size of: ", stringify!(TfLiteRegistration))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteRegistration>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteRegistration))
    );
    fn test_field_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(init)
            )
        );
    }
    test_field_init();
    fn test_field_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(free)
            )
        );
    }
    test_field_free();
    fn test_field_prepare() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prepare) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(prepare)
            )
        );
    }
    test_field_prepare();
    fn test_field_invoke() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).invoke) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(invoke)
            )
        );
    }
    test_field_invoke();
    fn test_field_profiling_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).profiling_string) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(profiling_string)
            )
        );
    }
    test_field_profiling_string();
    fn test_field_builtin_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).builtin_code) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(builtin_code)
            )
        );
    }
    test_field_builtin_code();
    fn test_field_custom_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).custom_name) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(custom_name)
            )
        );
    }
    test_field_custom_name();
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteRegistration>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteRegistration),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
}
pub const TfLiteDelegateFlags_kTfLiteDelegateFlagsNone: TfLiteDelegateFlags = 0;
pub const TfLiteDelegateFlags_kTfLiteDelegateFlagsAllowDynamicTensors: TfLiteDelegateFlags = 1;
pub const TfLiteDelegateFlags_kTfLiteDelegateFlagsRequirePropagatedShapes: TfLiteDelegateFlags = 2;
pub type TfLiteDelegateFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteDelegate {
    pub data_: *mut ::std::os::raw::c_void,
    pub Prepare: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut TfLiteContext,
            delegate: *mut TfLiteDelegate,
        ) -> TfLiteStatus,
    >,
    pub CopyFromBufferHandle: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut TfLiteContext,
            delegate: *mut TfLiteDelegate,
            buffer_handle: TfLiteBufferHandle,
            tensor: *mut TfLiteTensor,
        ) -> TfLiteStatus,
    >,
    pub CopyToBufferHandle: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut TfLiteContext,
            delegate: *mut TfLiteDelegate,
            buffer_handle: TfLiteBufferHandle,
            tensor: *mut TfLiteTensor,
        ) -> TfLiteStatus,
    >,
    pub FreeBufferHandle: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut TfLiteContext,
            delegate: *mut TfLiteDelegate,
            handle: *mut TfLiteBufferHandle,
        ),
    >,
    pub flags: i64,
}
#[test]
fn bindgen_test_layout_TfLiteDelegate() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteDelegate>(),
        48usize,
        concat!("Size of: ", stringify!(TfLiteDelegate))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteDelegate>(),
        8usize,
        concat!("Alignment of ", stringify!(TfLiteDelegate))
    );
    fn test_field_data_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegate),
                "::",
                stringify!(data_)
            )
        );
    }
    test_field_data_();
    fn test_field_Prepare() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Prepare) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegate),
                "::",
                stringify!(Prepare)
            )
        );
    }
    test_field_Prepare();
    fn test_field_CopyFromBufferHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CopyFromBufferHandle) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegate),
                "::",
                stringify!(CopyFromBufferHandle)
            )
        );
    }
    test_field_CopyFromBufferHandle();
    fn test_field_CopyToBufferHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CopyToBufferHandle) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegate),
                "::",
                stringify!(CopyToBufferHandle)
            )
        );
    }
    test_field_CopyToBufferHandle();
    fn test_field_FreeBufferHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreeBufferHandle) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegate),
                "::",
                stringify!(FreeBufferHandle)
            )
        );
    }
    test_field_FreeBufferHandle();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteDelegate>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteDelegate),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
extern "C" {
    pub fn TfLiteDelegateCreate() -> TfLiteDelegate;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TfLiteXNNPackDelegateOptions {
    pub num_threads: i32,
    pub enable_int8_weights_unpacking: bool,
}
#[test]
fn bindgen_test_layout_TfLiteXNNPackDelegateOptions() {
    assert_eq!(
        ::std::mem::size_of::<TfLiteXNNPackDelegateOptions>(),
        8usize,
        concat!("Size of: ", stringify!(TfLiteXNNPackDelegateOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<TfLiteXNNPackDelegateOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(TfLiteXNNPackDelegateOptions))
    );
    fn test_field_num_threads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteXNNPackDelegateOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_threads) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteXNNPackDelegateOptions),
                "::",
                stringify!(num_threads)
            )
        );
    }
    test_field_num_threads();
    fn test_field_enable_int8_weights_unpacking() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TfLiteXNNPackDelegateOptions>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_int8_weights_unpacking) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TfLiteXNNPackDelegateOptions),
                "::",
                stringify!(enable_int8_weights_unpacking)
            )
        );
    }
    test_field_enable_int8_weights_unpacking();
}
extern "C" {
    pub fn TfLiteXNNPackDelegateOptionsDefault() -> TfLiteXNNPackDelegateOptions;
}
extern "C" {
    pub fn TfLiteXNNPackDelegateCreate(
        options: *const TfLiteXNNPackDelegateOptions,
    ) -> *mut TfLiteDelegate;
}
extern "C" {
    pub fn TfLiteXNNPackDelegateGetThreadPool(
        delegate: *mut TfLiteDelegate,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TfLiteXNNPackDelegateDelete(delegate: *mut TfLiteDelegate);
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub _address: u8,
}
